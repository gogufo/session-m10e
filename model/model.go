package model

import "gorm.io/gorm"

type APITokens struct {
	gorm.Model
	TokenId    string `gorm:"column:tokenid;type:varchar(60);UNIQUE;NOT NULL;" json:"tokenid"`
	Token      string `gorm:"column:token;type:varchar(254);UNIQUE;NOT NULL;" json:"token"`
	TokenName  string `gorm:"column:tokenname;type:varchar(60);DEFAULT '';" json:"tokenname"`
	UID        string `gorm:"column:uid;type:varchar(60);NOT NULL;" json:"uid"`
	Created    int    `gorm:"column:created;type:int;DEFAULT '0'" json:"created"`
	Expiration int    `gorm:"column:expiration;type:int;DEFAULT '0'" json:"expiration"`  //if 0 - no expiration time
	Status     bool   `gorm:"column:status;type:bool;DEFAULT 'true'" json:"status"`      // if true - active, if false - deactivated
	IsAdmin    bool   `gorm:"column:is_admin;type:bool;DEFAULT 'false'" json:"is_admin"` //only if generated by admin
	Readonly   bool   `gorm:"column:readonly;type:bool;DEFAULT 'false'" json:"readonly"`
	Comment    string `gorm:"column:comment;type:varchar(60);DEFAULT '';" json:"comment"`
}

type ImpersonateTokens struct {
	gorm.Model
	TokenId   string `gorm:"column:tokenid;type:varchar(60);UNIQUE;NOT NULL;" json:"tokenid"`
	Token     string `gorm:"column:token;type:varchar(254);UNIQUE;NOT NULL;" json:"token"`
	UID       string `gorm:"column:uid;type:varchar(60);NOT NULL;" json:"uid"`
	Created   int    `gorm:"column:created;type:int;DEFAULT '0'" json:"created"`
	CreatedBy string `gorm:"column:createdby;type:varchar(254);DEFAULT '';" json:"createdby"`
}

type RefreshTokens struct {
	gorm.Model
	UID          string `gorm:"column:uid;type:varchar(60);NOT NULL;" json:"uid"`
	RefreshToken string `gorm:"column:refresh_token;type:varchar(254);UNIQUE;NOT NULL;" json:"refresh_token"`
	LifeTime     int    `gorm:"column:livetime;type:int;DEFAULT '0'" json:"lifetime"`
}
